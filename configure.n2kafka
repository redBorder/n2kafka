#!/bin/bash
#

mkl_require good_cflags must pass
mkl_require socket must pass
mkl_require gitversion as GITVERSION
mkl_require atomics must pass

mkl_meta_set "description" "name"      "n2kafka"
mkl_meta_set "description" "oneline"   "The Network to kafka conversion service"
mkl_meta_set "description" "long"      "Consume messages from tcp/udp/http and send them via kafka"
mkl_meta_set "description" "copyright" "Copyright (c) 2014-2016 Eneo Tecnologia S.L."

mkl_mkvar_append CPPFLAGS CPPFLAGS "-DFORTIFY_SOURCE=2"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-fno-strict-aliasing" # Needed by libev
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wunused -Wcast-qual -Wextra -Wsign-conversion -Wshadow"
#mkl_mkvar_append CPPFLAGS CPPFLAGS "-ftrack-macro-expansion=2"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wcast-align -Wdisabled-optimization -Winit-self -Wlogical-op"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wmissing-include-dirs -Wstrict-overflow=5 -Wundef -Wswitch-default"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wmissing-declarations -Wdisabled-optimization"

# This will make the life easier
mkl_mkvar_append CPPFLAGS CPPFLAGS "-I. -I./src"

mkl_toggle_option "Feature" WITH_HTTP "--enable-http" "HTTP support using libmicrohttpd" "y"
mkl_toggle_option "Debug" WITH_COVERAGE "--enable-coverage" "Coverage build" "n"

function checks_libmicrohttpd {
    # quick hack to avoid bad formatted libmicrohttpd header. With this macro
    # defined, the header will know that we are using GCC at libmicrohttp
    # 0.9.44
    mkl_mkvar_append CPPFLAGS CPPFLAGS "-D__clang_major__"
    mkl_meta_set "libmicrohttpd" "desc" \
        "library embedding HTTP server functionality"
    mkl_meta_set "libmicrohttpd" "deb" "libmicrohttpd-dev"
    mkl_lib_check "libmicrohttpd" "" fail CC "-lmicrohttpd" \
        "#include <microhttpd.h>"
    mkl_define_set "Have libmicrohttpd library" "HAVE_LIBMICROHTTPD" "1"
}

function checks {
    mkl_meta_set "librd" "desc" "Magnus Edenhill's librd is available at http://github.com/edenhill/librd"
    mkl_lib_check --static=-lrd "librd" "" fail CC "-lrd -lpthread -lz -lrt" \
       "#include <librd/rd.h>"

    # Check that librdkafka is available, and allow to link it statically.
    mkl_meta_set "librdkafka" "desc" \
      "Magnus Edenhill's librdkafka is available at http://github.com/edenhill/librdkafka"
    mkl_meta_set "librdkafka" "deb" "librdkafka-dev"
    mkl_lib_check --static=-lrdkafka "librdkafka" "" fail CC "-lrdkafka -lpthread -lz" \
       "#include <librdkafka/rdkafka.h>
       #if RD_KAFKA_VERSION < 0x00090100
       #error Need librdkafka version >0.9.1
       #endif"

    mkl_meta_set "libev" "desc" "A high performance full-featured event loop written in C"
    mkl_meta_set "libev" "deb" "libev-dev"
    mkl_lib_check "libev" "" fail CC "-lev" "#include <ev.h>"

    # -libmicrohttpd required if HTTP enabled
    if [[ "x$WITH_HTTP" == "xy" ]]; then
        checks_libmicrohttpd
    fi

    mkl_meta_set "libjansson" "desc" "C library for encoding, decoding and manipulating JSON data"
    mkl_meta_set "libjansson" "deb" "libjansson-dev"
    mkl_lib_check --static=-ljansson "libjansson" "" fail CC "-ljansson" \
       "#include <jansson.h>
       #if JANSSON_VERSION_HEX < 0x020700
       #error Need jansson library version >2.7
       #endif"

    # TODO include some function that is only in v2, because CentOS bring us v1
    mkl_meta_set "yajl" "desc" "Small event-driven (SAX-style) JSON parser"
    mkl_lib_check --static=-lyajl "yajl" "" fail CC "-lyajl" \
       "#include <yajl/yajl_parse.h>"

    # Check that libcurl is available, and allow to link it statically.
    mkl_meta_set "lcurl" "desc" "Free and easy-to-use client-side URL transfer library"
    mkl_meta_set "lcurl" "deb" "libcurl4-gnutls-dev"
    mkl_lib_check --static=-lcurl "libcurl" "" fail CC "-lcurl -lpthread -lz" \
       "#include <curl/curl.h>"

    # Check libcurl is new enough
    mkl_meta_set "curlversion" "name" "libcurl MAX_TOTAL_CONNECTIONS"
    mkl_meta_set "curlversion" "desc" "libcurl 7.45.0 or later is required for the Max connections option"
    mkl_compile_check "curlversion" "" fail CC "" \
        "#include <curl/curl.h>
        static int foo __attribute__((unused)) = CURLMOPT_MAX_TOTAL_CONNECTIONS;"

    if [[ "x$WITHOUT_OPTIMIZATION" != "xy" || "x$WITH_COVERAGE" != "xy" ]]; then
      mkl_mkvar_append CPPFLAGS CPPFLAGS "-DNDEBUG"
    fi

    if [[ "x$WITH_COVERAGE" != "xn" ]]; then
      mkl_mkvar_append CPPFLAGS CPPFLAGS "--coverage"
      mkl_mkvar_append LDFLAGS LDFLAGS "--coverage"
    fi
}
